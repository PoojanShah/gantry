//2015-02-12
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
public static class SRSUtilities:System.Object{
    static private float stretchFactor=0.875f;
	static public IEnumerator CallInFrames(Action f,int frames){
		Debug.Log("SRSUtilities.CallInFrames("+f.ToString()+", "+frames+")");
		for(int i=0;i<=frames;i++){
			Debug.Log("Calling an action in "+(frames-i)+" frames.");
			yield return null;
		}
		f();
	}
    private static GUISkin _darkAgesSkin;
    private static GUISkin darkAgesSkin{
        get{
            if(_darkAgesSkin==null)_darkAgesSkin=Resources.Load<GUISkin>("Dark Ages");
            return _darkAgesSkin;
        }
    }
//	static public IEnumerator CallInSeconds(Action f,float seconds){
//		Debug.Log("SRSUtilities.CallInSeconds("+f.ToString()+", "+seconds+")");
//		yield return null;//new WaitForSeconds(seconds);
//		Debug.Log("SRSUtilities.CallInSeconds(), after yield.");
////		StartCoroutine(f,seconds);
//		f();
//	}
	public static IEnumerator CallInSeconds(Action f,float seconds=0){
//		Debug.Log("TestRoutine UNO.");
		yield return new WaitForSeconds(seconds);
//		Debug.Log("TestRoutine DOS.");
		f();
	}
    public static void StretchedLabel(Rect r,string text,float stretchBy){
        StretchedLabel(r,text,GUI.skin.label,stretchBy);
    }
    public static float CalcStretchedFontHeight(GUIStyle style,string text,float width,float stretchedBy){
//        float height=darkAgesSkin.customStyles[9].CalcHeight(new GUIContent(text),width);
//        return height-(stretchedBy-1)*height;
        return darkAgesSkin.customStyles[9].CalcHeight(new GUIContent(text),width-(stretchedBy-1)*width);
    }
    public static void StretchedLabel(Rect r,string text,GUIStyle style,float stretchBy){
        Matrix4x4 matrixBackup=GUI.matrix;
        GUI.matrix*=Matrix4x4.Scale(new Vector3(stretchBy,1,1));
//        Debug.Log("Alignment: "+style.alignment.ToString());
        if(style.alignment.ToString().EndsWith("Center")){
//                    r.width/=stretchBy;
//            r.width-=r.width-r.width/stretchBy;
            r.width-=(stretchBy-1)*r.width;
//            r.x-=(stretchBy*r.width-r.width)*0.5f;
        }
        GUI.Label(r,text,style);
        GUI.matrix=matrixBackup;
    }
    public static bool StretchedButtonLabel(Rect r,string text,float stretchBy){
        return StretchedButtonLabel(r,text,GUI.skin.button,stretchBy);
    }
    public static bool CorrectedButtonLabel(Rect r,string text,GUIStyle style){
        return StretchedButtonLabel(r,text,style,stretchFactor*(1024f/768f)/((float)Screen.width/(float)Screen.height));
    }
    public static bool StretchedButtonLabel(Rect r,string text,GUIStyle style,float stretchBy){
        //        Debug.Log("SRSUtilities.StretchedButtonLabel stretchby: "+stretchBy+"; style's font size: "+style.fontSize);
        bool ergebnis=GUI.Button(r,"",style);
        Matrix4x4 matrixBackup=GUI.matrix;
        Texture2D normal=style.normal.background,hover=style.hover.background,active=style.active.background;
        TextAnchor alignment=style.alignment;
        style.alignment=TextAnchor.MiddleCenter;
        style.normal.background=style.hover.background=style.active.background=null;
        GUI.matrix*=Matrix4x4.Scale(new Vector3(stretchBy,1,1));
        //        GUI.Label(new Rect(r.x+r.width*0.5f,r.y+r.height*0.5f,r.width,r.height),text,darkAgesSkin.customStyles[8]);
        //        GUI.Label(r,text,darkAgesSkin.customStyles[8]);
        //        GUI.Label(new Rect(r.x/stretchBy,r.y,r.width/stretchBy,r.height),text,darkAgesSkin.customStyles[8]);
        GUI.Label(new Rect(r.x/stretchBy,r.y,r.width/stretchBy,r.height),text,style);
        GUI.matrix=matrixBackup;
        style.normal.background=normal;
        style.hover.background=hover;
        style.active.background=active;
        style.alignment=alignment;
        return ergebnis;
    }
    public static string Stringify<TKey,TValue>(this Dictionary<TKey,TValue> d,string delimiter=","){
        string str="{";
        foreach(KeyValuePair<TKey,TValue> kvp in d)str+=kvp.Key+":"+kvp.Value+delimiter;
        return str.Substring(0,str.Length-1)+"}";
    }
    public static void ApplyRecursively(this Transform trans,Action<Transform> a){
//        Debug.Log(trans.name+".ApplyRecursively("+a+"), children: "+trans.childCount);
        a(trans);
        foreach(Transform t in trans)t.ApplyRecursively(a);
    }
    public static void NormalizeGUIMatrix(){
        GUI.matrix=Matrix4x4.TRS(Vector3.zero,Quaternion.identity,new Vector3((float)1.0*Screen.width/Builder.ScreenW,(float)1.0*Screen.height/Builder.ScreenH,1.0f));
    }
    public static void ApplyToAllMaterials(GameObject o,Action<Material> a){
        foreach(Renderer r in o.GetComponentsInChildren<Renderer>())foreach(Material m in r.materials)a(m);
    }
    public static bool Approximate(Vector3 v1,Vector3 v2,float threshold=0.1f){
        return Vector3.Distance(v1,v2)<threshold;
    }
    public static string Vector3ToString(Vector3 v){
        return "("+v.x+","+v.y+","+v.z+")";
    }
    public static Vector3 Vector3Multiply(Vector3 v1,Vector3 v2){return new Vector3(v1.x*v2.x,v1.y*v2.y,v1.z*v2.z);}
    public static void DrawPlane(Plane p,Color edgeColor=default(Color),Color normalColor=default(Color),float time=30,float scale=1){
           DrawPlane(p.normal*p.distance,p.normal,edgeColor,normalColor,time,scale);
    }
    public static void DrawPlane(Vector3 position,Vector3 normal,Color edgeColor=default(Color),Color normalColor=default(Color),float time=30,float scale=1){
      //      Debug.Log("Default color:"+default(Color));
        edgeColor=edgeColor==default(Color)?Color.green:edgeColor;
        normalColor=normalColor==default(Color)?Color.red:normalColor;
        Vector3 v3=Vector3.Cross(normal,normal.normalized==Vector3.forward?Vector3.up:Vector3.forward).normalized*normal.magnitude*scale;
        Vector3 corner0=position+v3;
        Vector3 corner2=position-v3;
        var q=Quaternion.AngleAxis(90,normal);
        v3=q*v3;
        Vector3 corner1=position+v3;
        Vector3 corner3=position-v3;
        Debug.DrawLine(corner0,corner2,edgeColor,time);
        Debug.DrawLine(corner1,corner3,edgeColor,time);
        Debug.DrawLine(corner0,corner1,edgeColor,time);
        Debug.DrawLine(corner1,corner2,edgeColor,time);
        Debug.DrawLine(corner2,corner3,edgeColor,time);
        Debug.DrawLine(corner3,corner0,edgeColor,time);
        Debug.DrawRay(position,normal,normalColor,time);
    }
    public static void Draw3DCrosshair(Vector3 p,float size=1,Color color=default(Color),float duration=0){
        if(color==default(Color))color=Color.red;
        for(int i=0;i<3;i++)for(int s=-1;s<=1;s+=2){
          Vector3 v=Vector3.zero;
          v[i]=size*s;
          Debug.DrawLine(p,p+v,color,duration);
        }
    }
    public static void UniformMenu(Rect r,KeyValuePair<string,Action>[] entries,GUIStyle style=null,float margin=8){
        for(int i=0;i<entries.Length;i++)if(entries[i].Key!=""){
          if(GUI.Button(r,entries[i].Key,style??GUI.skin.button))entries[i].Value();
          r.y+=r.height+margin;
        }
    }
    public static float Cubic(float x,float p){
        float D=0,
              C=p,
              B=3-3*C,
              A=1-(B+C);
        return A*Mathf.Pow(x,3)+B*Mathf.Pow(x,2)+C*x+D;
    }
}